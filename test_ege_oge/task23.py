# У исполнителя 3 команды:
# + 1
# + 4
# + 5
# сколько существует программ для перевода 30 в 46
def a(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    return a(x, y - 1) + a(x, y - 4) + a(x, y - 5)


print(a(30, 46))


# У исполнителя 2 команды:
# + 1
# * 3
# сколько существует программ для перевода 1 в 20
def b(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    if y % 3 == 0:
        return b(x, y - 1) + b(x, y // 3)
    return b(x, y - 1)


print(b(1, 20))


# У исполнителя 2 команды:
# + 1
# * 2
# сколько существует программ для перевода 1 в 20, в траектории содержащих 10
def c(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    if y % 2 == 0:
        return c(x, y - 1) + c(x, y // 2)
    return c(x, y - 1)


print(c(1, 10) * c(10, 20))


# У исполнителя 3 команды:
# + 1
# + 2
# * 3
# сколько существует программ для перевода 2 в 12, в траектории содержащих 8 и 10
def d(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    if y % 3 == 0:
        return d(x, y - 1) + d(x, y - 2) + d(x, y // 3)
    return d(x, y - 1) + d(x, y - 2)


print(d(2, 8) * d(8, 10) * d(10, 12))


# У исполнителя 2 команды:
# + 1
# * 2
# сколько существует программ для перевода 2 в 29, в траектории содержащих 14 и не содержит 25
def e(x, y):
    if x > y or y == 25:
        return 0
    if x == y:
        return 1
    if y % 2 == 0:
        return e(x, y - 1) + e(x, y // 2)
    return e(x, y - 1)


print(e(2, 14) * e(14, 29))


# У исполнителя 3 команды:
# + 1
# * 2
# * 3
# сколько существует программ для перевода 3 в 46, в траектории содержащих 12 и не содержит 25
def e(x, y):
    if x > y or y == 25:
        return 0
    if x == y:
        return 1
    if y % 2 == 0 and y % 3 != 0:
        return e(x, y - 1) + e(x, y // 2)
    if y % 3 == 0 and y % 2 != 0:
        return e(x, y - 1) + e(x, y // 3)
    if y % 2 == 0 and y % 3 == 0:
        return e(x, y - 1) + e(x, y // 2) + e(x, y // 3)
    return e(x, y - 1)


print(e(3, 12) * e(12, 46))


# У исполнителя 3 команды:
# + 1
# + 2
# + следующее (например для 3 - следующее 4, то есть 3+4=7, также 3*2+1=7 см. строку 119)
# сколько существует программ для перевода 2 в 10
def f(x, y):
    if x > y:
        return 0
    if x == y:
        return 1
    if y % 2 != 0:
        return f(x, y - 1) + f(x, y - 2) + f(x, (y - 1) // 2)
    return f(x, y - 1) + f(x, y - 2)


print(f(2, 10))

# У исполнителя 2 команды для преобразования числа в троичной!!! системе счисления:
# + 3
# * 2 + 1
# сколько различных результатов можно получить из числа 2, используя ровно 13 команд
res = set()


def g(x, step):
    global res
    if step == 13:
        res.add(x)
    else:
        g(x + 3, step + 1)
        g(x * 2 + 1, step + 1)


g(int('2', 3), 0)
print(len(res))

# У исполнителя 3 команды
# + 1
# + 2
# * 2
# сколько различных чисел в промежутке [34, 59] может быть получено из 1 с помощью программ, состоящих из 6 команд


def h(x, step):
    if x == 1:
        return True
    if x < 1 or step == 0:
        return False
    if x % 2 == 0:
        return h(x - 1, step - 1) + h(x - 2, step - 1) + h(x // 2, step - 1)
    return h(x - 1, step - 1) + h(x - 2, step - 1)


k = 0
for i in range(34, 60):
    if h(i, 6):
        k += 1
print(k)
